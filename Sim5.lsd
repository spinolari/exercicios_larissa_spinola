	
Label Root
{
	Son: SECTOR
	Label SECTOR
	{
		Son: FIRM
		Label FIRM
		{
			Var: X
			Param: max
			Param: min
			Param: c
			Var: X_Share
			Param: firm_rank
			Var: Price
			Var: Quality
			Param: a
			Param: b

		}

		Var: X_Sum
		Var: X_Ave
		Var: X_Max
		Var: X_Share_Sum
		Var: X_Pos
		Var: RANK

	}


}


DATA

Object: Root C	1

Object: SECTOR C	1
Var: X_Sum 0 s + n n
Var: X_Ave 0 s + n n
Var: X_Max 0 s + n n
Var: X_Share_Sum 0 s + n n
Var: X_Pos 0 s + n n
Var: RANK 0 s + n p

Object: FIRM C	10
Var: X 1 s + n n	0	0	0	0	0	0	0	0	0	0
Param: max 0 n + n n	1	1	1	1	1	1	1	1	1	1
Param: min 0 n + n n	0	0	0	0	0	0	0	0	0	0
Param: c 0 s + n p	0.3	0.3	0.3	0.3	0.3	0.3	0.3	0.3	0.3	0.3
Var: X_Share 0 s + n n
Param: firm_rank 0 s + n n	0	0	0	0	0	0	0	0	0	0
Var: Price 1 s + n p	1	1	1	1	1	1	1	1	1	1
Var: Quality 2 s + n p	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
Param: a 0 s + n p	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5
Param: b 0 s + n p	0.7	0.7	0.7	0.7	0.7	0.7	0.7	0.7	0.7	0.7

SIM_NUM 1
SEED 1
MAX_STEP 100
EQUATION fun_exercicios.cpp
MODELREPORT report_Sim1.html

DESCRIPTION

Object_Root
(no description available)
END_DESCRIPTION

Object_SECTOR
(no description available)
_INIT_

END_DESCRIPTION

Variable_X_Sum
Variável do Setor
SOMA
_INIT_

END_DESCRIPTION

Variable_X_Ave
Variável do Setor
MÉDIA
_INIT_

END_DESCRIPTION

Variable_X_Max
Variável do Setor
MÁXIMO
_INIT_

END_DESCRIPTION

Variable_X_Share_Sum
Variável do Setor
SOMA DAS PARCELAS DE TODAS AS FIRMA
_INIT_

END_DESCRIPTION

Variable_X_Pos
(no description available)
_INIT_

END_DESCRIPTION

Variable_RANK
(no description available)
_INIT_

END_DESCRIPTION

Object_FIRM
(no description available)
_INIT_

END_DESCRIPTION

Variable_X
Variável X (short form)
_INIT_
All 10 instances drawn from uniform distribution between 0 and 0.
END_DESCRIPTION

Parameter_max
(no description available)
_INIT_
All 10 instances equal to 1.
END_DESCRIPTION

Parameter_min
(no description available)
_INIT_
All 10 instances equal to 0.
END_DESCRIPTION

Parameter_c
Random walk
_INIT_
All 10 instances equal to 0.3.
END_DESCRIPTION

Variable_X_Share
Variável do Setor
PARCELA DE CADA FIRMA
_INIT_

END_DESCRIPTION

Parameter_firm_rank
(no description available)
_INIT_
All 10 instances equal to 0.
END_DESCRIPTION

Variable_Price
O preço corresponde ao ganho de market share passado dela.


_INIT_
All 10 instances equal to 1.
END_DESCRIPTION

Variable_Quality
A qualidade é cumulativa, aleatória e crescente. Caso a firma obtenha uma "qualidade" inferior à anterior, ela utiliza a anterior.


_INIT_
All 10 instances equal to 1.
END_DESCRIPTION

Parameter_a
(no description available)
_INIT_
All 10 instances equal to 0.5.
END_DESCRIPTION

Parameter_b
(no description available)
_INIT_
All 10 instances equal to 0.7.
END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
//#define EIGENLIB			// uncomment to use Eigen linear algebra library
//#define NO_POINTER_INIT	// uncomment to disable pointer checking

#include "fun_head_fast.h"

// do not add Equations in this area

MODELBEGIN

// insert your equations here, between the MODELBEGIN and MODELEND words

EQUATION("X")
/*
Variável X (short form)
*/

RESULT(VL("X",1)+V("c"))


EQUATION("c")
/*
Random walk
*/

v[0]=V("min");
v[1]=V("max");
v[2]=uniform(v[0], v[1]);
RESULT(v[2])

EQUATION("X_Sum")
/*
Variável do Setor
SOMA
*/
v[0]=0;
CYCLE(cur, "FIRM")
{
	v[1]=VS(cur,"X");
	v[0]=v[0]+v[1];
}

RESULT(v[0])

EQUATION("X_Ave")
/*
Variável do Setor
MÉDIA
*/

v[0]=0;
CYCLE(cur, "FIRM")
{
	v[1]=VS(cur,"X");
	v[0]=(v[0]+v[1])/COUNT("FIRM");
}

RESULT(v[0])

EQUATION("X_Max")
/*
Variável do Setor
MÁXIMO
*/

v[0]=0;
CYCLE(cur, "FIRM")
{
	v[1]=VS(cur, "X");
	if(v[1]>v[0]) 	v[0]=v[1]; else v[0]=v[0];
}
RESULT(v[0])

MODELEND

// do not add Equations in this area

void close_sim( void )
{
	// close simulation special commands go here
}

END_EQ_FILE
